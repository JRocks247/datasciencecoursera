names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best <- function(state, outcome) {
setwd("C:/Users/Jono/Desktop/Coursera/Programming Assignment 3"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
+rankhospital <- function(state, outcome, num) {
+    ## Read outcome data
+    data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
+    data <- data[c(2, 7, 11, 17, 23)]
+    names(data)[1] <- "name"
+    names(data)[2] <- "state"
+    names(data)[3] <- "heart attack"
+    names(data)[4] <- "heart failure"
+    names(data)[5] <- "pneumonia"
+
+    ## Validate the outcome string
+    outcomes = c("heart attack", "heart failure", "pneumonia")
+    if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
+
+    ## Validate the state string
+    states <- data[, 2]
+    states <- unique(states)
+    if( state %in% states == FALSE ) stop("invalid state")
+
+    ## Validate the num value
+    if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
+
+    ## Grab only rows with our state value
+    data <- data[data$state==state & data[outcome] != 'Not Available', ]
+
+    ## Order the data
+    data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
+    data <- data[order(data$name, decreasing = FALSE), ]
+    data <- data[order(data[outcome], decreasing = FALSE), ]
+
+    ## Process the num argument
+    vals <- data[, outcome]
+    if( num == "best" ) {
+        rowNum <- which.min(vals)
+    } else if( num == "worst" ) {
+        rowNum <- which.max(vals)
+    } else {
+        rowNum <- num
+    }
+
+    ## Return hospital name in that state with lowest 30-day death rate
+    data[rowNum, ]$name
+}
rankhospital <- function(state, outcome, num) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Process the num argument
vals <- data[, outcome]
if( num == "best" ) {
rowNum <- which.min(vals)
} else if( num == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- num
}
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
setwd("C:/Users/Jono/Desktop/Coursera/Programming Assignment 3")
submit()
2
submit()
best
best(texas,)
best(TX,heart attack)
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("./ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## Return hospital name in that state with lowest 30-day death rate
data.state <- data[data$State==state,]
idx <- which.min(as.double(data.state[,colName]))
data.state[idx,"Hospital.Name"]
}
setwd("C:/Users/Jono/Desktop/Coursera/Programming Assignment 3")
submit()
best("SC", "heart attack")
## best.R
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("./ProgAssignment3/outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## Return hospital name in that state with lowest 30-day death rate
data.state <- data[data$State==state,]
idx <- which.min(as.double(data.state[,colName]))
data.state[idx,"Hospital.Name"]
}
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
setwd("C:/Users/Jono/Desktop/Coursera/Programming Assignment 3")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
setwd("C:/Users/Jono/Desktop/Coursera/Programming Assignment 3")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
setwd("C:/Users/Jono/Desktop/Coursera/Programming Assignment 3")
submit()
submit()
setwd("C:/Users/Jono/Desktop/Coursera/Programming Assignment 3")
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975, df = 2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference<-(g2-g1)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.95,9)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
x$conf.int
10$conf.int
.95$conf.int
info()
t.test(difference)conf.int
t.test(difference)$conf.int
sp <- {(7*15.34^2+2+20*18.23^2)/(8+21-2)}
sp <- 7*15.34^2+2+20*18.23^2
sp <- 7*15.34^2+20*18.23^2
ns <-df(sp)
ns <-7+20-2
ns <-8+21-2
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,27)*sp(1/8+1/21)^.5
132.86-127.44+c(-1,1)*qt(.975,27)*sp*(1/8+1/21)^.5
132.86-127.44+c(-1,1)*qt(.975,27)*sp*sqrt(1/8+1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf.int
t.test(g2,g1,paired = TRUE)$conf
num <- (15.34^2/8+18.23^2/21)
num <- (15.34^2/8+18.23^2/21)^2
den <- 15.34^4/8^2/7+18.23^4/21^2/20
mydf<-num/den
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
10/sqrt(100)
library(layer)
swirl()
Library(ggplot2)
library(ggplot2)
swirl()
swirl()
(32-30)/1
swirl()
32-30/(10/sqrt(16))
32-30/(10/4)
(32-30)/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$sheight,fs$fheight, paired = TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
6
7
mybin[6]
mybin{6}
mybin[7]
8
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
swirl()
pt(q=2.5, df=15, lower.tail=FALSE)
qnorm(.95, 2)
qnorm(.95)
library(ggplot2)
swirl()
swirl()
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
library(swirl)
swirl()
lm(child ~ parent, galton)
fit <- lm ( child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
var(galton$children)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(est(ols.slope),est(ols.slope))
varEst <- var(est(ols.slope),est(ols.ic))
varEst <- var(est(ols.slope)+est(ols.ic))
info()
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,(varRes+varEst))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag=dis, attenu)
efit <- lm(accel ~ mag+dis, attenu)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l
l_nor <- lm(child ~ parent)
l_nor <- lm(galton$child ~ galton$parent)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x,w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)$coeff
data(mtcars)
lm(mpg ~ wt, data=mtcars)
library(swirl)
swirl()
lm(child ~ parent, Data = Galton)
lm(child ~ parent, Data = "Galton")
info()
lm(childeren ~ parent, Data = "Galton")
lm(children ~ parent, Data = "Galton")
fit<-lm(children ~ parent, Galton)
fit<-lm(children ~ parent, galton)
fit<-lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2))
sTot <- sum((galton$child - mu)^2)
sRes <- devo
sRes <- deviance(fit)
1-sTot/sRes
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1,
| galton)
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
exit
Swirl()
info()
main()
lm(Fertility ~ ....., swiss)
lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agricultur,swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
cor
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <-sum(swiss$Examination,swiss$Catholic)
ec <-swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ Agriculture + Catholic + Examination + Education + Infant.Mortality + ec, swiss)
coef(all - efit)
all - efit
coef(all)-coef(efit)
all$coefficients-efit$coefficients
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1,galton)
lm(child ~ ones + parent,galton)
\\\
library(swirl)
swirl()
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- fit(Agriculture ~ Fertility, data=swiss)
fit1 <- lm(Agriculture ~ Fertility, data=swiss)
fit1 <- lm(Fertility ~ Agriculture, data=swiss)
fit1 <- lm(Fertility ~ Agriculture + Examination + Education, data=swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data=swiss)
anova(fit1,fit3)
install.packages("caret", dependencies = c("Depends", "Suggests"))
setwd("C:/Users/Jono/Desktop/Coursera/Practical_Machine_Learning")
pml.training.1 <- read.csv("C:/Users/Jono/Desktop/Coursera/Practical_Machine_Learning/Data/pml-training-1.csv", header=FALSE)
View(pml.training.1)
